## [item 24] 멤버 클래스는 되도록 static으로 만들어라

* 중첩클래스
    - 중첩 클래스(nested class)란 다른 클래스 안에서 정의된 클래스<br>
  중첩 클래스는 자신을 감싸고 있는 바깥의 클래스에서만 쓰이며, 그 외 쓰임새가 있다면 top level class로 만들어야 한다.
<br>

* 종류
>1. 정적 멤버 클래스
>2. (비정적) 멤버 클래스
>3. 익명 클래스
>4. 지역클래스

이 중에서 정적 멤버 클래스를 제외한 나머지를 내부 클래스 (inner class)라고 한다.

![img.png](https://media.vlpt.us/images/cocodori/post/36017566-1426-413d-a7da-5159b87d03c5/innerclass.png)

### 정적 멤버 클래스
>바깥 클래스의 인스턴스 생성없이 바로 접근이 가능하다.<br>
>바깥 클래스의 private 멤버에도 접근할 수 있다는 점만 제외하고는 일반 클래스와 같다.<br>
>흔히 바깥 클래스와 함께 쓰일 때만 유용한 public 도우미 클래스로 쓰인다.

```java
@Data
public class CouponDiscount {
private DiscountType discountType;
private String discountPrice;
private String discountRate;

    @Getter
    @AllArgsConstructor
    public enum DiscountType {
        R("정률"),
        M("정액"),
        V("배송비");
        private final String description;
    }
}

//중첩된 enum은 암시적으로 static
//CouponDiscount 인스턴스가 없더라도 CouponDiscount.DiscountType.R; 이렇게 사용 가능
```

### 비정적 멤버 클래스
> 바깥 클래스는 이 멤버 클래스를 멤버 변수처럼 사용 할 수 있다.<br>
> 바깥 클래스의 인스턴스와 암묵적으로 연결, 그래서 비정적 멤버 클래스의 인스턴스 메서드에서 정규화된 this를 통해 바깥 인스턴스의 메서드를 호출한다거나 바깥 인스턴스를 참조 할 수 있다.<br>
> 여기서 정규화된 this는 Class명.this 형태로 바깥 클래스의 이름을 명시하는 용법이다.<br>
> 어떤 클래스의 인스턴스를 감싸 마치 다른 클래스의 인스턴스처럼 보이게 하는 어댑터를 정의할때 자주 쓰인다.

- 멤버 클래스에서 바깥 인스턴스에 접근 할 일이 없다면, 되도록 static을 붙여서 정적을 만들자.<br>
  (비정적으로 만들면, 바깥 인스턴스와 숨은 외부 참조를 갖게 되어 시간과 메모리가 낭비되게 된다.<br>
  또한 GC가 인스턴스를 수거하지 못해 메모리 누수를 야기할 수 도 있다.)

### 익명 클래스
> 클래스의 이름이 없으며 바깥 클래스의 멤버가 되는 것도 아니다. 사용하는 시점에 동시에 선언과 인스턴스가 만들어진다.<br>
> 상수 변수(초기화된 final 기본 타입과 문자열 필드)만 멤버로 가질 수 있으며, insanceof를 통한 타입검사가 불가하다.<br>
> 또한 여러 인터페이스를 구현 할 수 없으며, 인터페이스 구현과 다른 클래스 상속을 같이 할 수도 없다.<br>
> 표현식 중간에 등장하기 때문에, 10줄 이하로 간결하게 작성하는 것이 좋다.

* 이제는 자바가 람다를 지원하기 때문에 즉석에서 간단한 처리 객체를 생성할 때는 익명 클래스 대신 람다를 사용하면 된다.

### 지역 클래스

> 지역 변수를 선언하는 곳이라면 어디에서든 선언이 가능하며, 스코프도 지역 변수와 동일하다.<br>
> 이름이 있고 반복 사용이 가능하며, 비정적 문맥에서만 바깥 인스턴스를 참조 할 수 있고 정적 멤버를 가질 수 없다.<br>
> 가독성을 위해 짧게 작성하는 것이 좋다.


###정리
>* 중첩 클래스가 한 메서드 안에서만 사용되며 해당 인스턴스를 생성하는 지점이 단 한곳이고 해당 타입으로 쓰기에 적합한 클래스나 인터페이스가 있다면 익명클래스로 만들고, 아니면 지역 클래스로 만들자.<br>
>* 메서드 밖에서도 사용해야 하거나 메서드 안에 정의하기엔 길이가 너무 길다면 멤버 클래스로 만든다.<br>
>* 멤버 클래스의 인스턴스가 바깥 인스턴스를 참조한다면 비정적으로, 아니라면 정적으로 만든다.<br>
>* 또한 중첩 클래스가 한 메서드 안에서만 쓰이고 생성하는 지점이 단 한 곳이고 해당 타입으로 쓰기에 적합한 클래스나 인터페이스가 이미 있다면
익명 클래스로 만들고, 그렇지 않으면 지역클래스로 만든다.
